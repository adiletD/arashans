{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL } from '../constants/productConstants';\nexport const productListReducer = (state = {\n  products: []\n}, action) => {\n  // this proudcts: [] gonna be shown in the browser\n  //we gonna evaulate the type of action, may contain a payload\n  switch (action.type) {\n    //prod liust req\n    case PRODUCT_LIST_REQUEST:\n      return {\n        loading: true,\n        products: []\n      };\n    //loading, when req, we want the componenet to know that it is loading\n\n    case PRODUCT_LIST_SUCCESS:\n      return {\n        loading: false,\n        products: action.payload\n      };\n    // loading is already done since we have the list of products\n    // products are filled with the payload\n\n    case PRODUCT_LIST_FAIL:\n      //404 or smth like that\n      return {\n        loading: false,\n        error: action.payload\n      };\n    //we send error in the payload\n\n    default:\n      return state;\n  }\n};\nexport const productDetailsReducer = (state = {\n  product: {\n    reviews: []\n  }\n}, action) => {\n  // this proudcts: [] gonna be shown in the browser\n  //we gonna evaulate the type of action, may contain a payload\n  switch (action.type) {\n    //prod liust req\n    case PRODUCT_DETAILS_REQUEST:\n      return {\n        loading: true,\n        ...state\n      };\n    //loading, when req, we want the componenet to know that it is loading\n\n    case PRODUCT_DETAILS_SUCCESS:\n      return {\n        loading: false,\n        product: action.payload\n      };\n    // loading is already done since we have the list of products\n    // products are filled with the payload\n\n    case PRODUCT_DETAILS_FAIL:\n      //404 or smth like that\n      return {\n        loading: false,\n        error: action.payload\n      };\n    //we send error in the payload\n\n    default:\n      return state;\n  }\n}; //to use th reducer we have to import it to store js","map":{"version":3,"sources":["/Users/adilet/Documents/Projects/arashans/arashans/frontend/src/reducers/productReducers.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","productListReducer","state","products","action","type","loading","payload","error","productDetailsReducer","product","reviews"],"mappings":"AAAA,SACEA,oBADF,EAEEC,oBAFF,EAGEC,iBAHF,EAIEC,uBAJF,EAKEC,uBALF,EAMEC,oBANF,QAOO,+BAPP;AASA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAT,EAA2BC,MAA3B,KAAsC;AACtE;AACA;AACA,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKV,oBAAL;AACE,aAAO;AAAEW,QAAAA,OAAO,EAAE,IAAX;AAAiBH,QAAAA,QAAQ,EAAE;AAA3B,OAAP;AAAuC;;AACzC,SAAKP,oBAAL;AACE,aAAO;AAAEU,QAAAA,OAAO,EAAE,KAAX;AAAkBH,QAAAA,QAAQ,EAAEC,MAAM,CAACG;AAAnC,OAAP;AAAoD;AACtD;;AACA,SAAKV,iBAAL;AAAwB;AACtB,aAAO;AAAES,QAAAA,OAAO,EAAE,KAAX;AAAkBE,QAAAA,KAAK,EAAEJ,MAAM,CAACG;AAAhC,OAAP;AAAiD;;AACnD;AACE,aAAOL,KAAP;AAVJ;AAYD,CAfM;AAiBP,OAAO,MAAMO,qBAAqB,GAAG,CACnCP,KAAK,GAAG;AAAEQ,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAO,EAAE;AAAX;AAAX,CAD2B,EAEnCP,MAFmC,KAGhC;AACH;AACA;AACA,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKP,uBAAL;AACE,aAAO;AAAEQ,QAAAA,OAAO,EAAE,IAAX;AAAiB,WAAGJ;AAApB,OAAP;AAAmC;;AACrC,SAAKH,uBAAL;AACE,aAAO;AAAEO,QAAAA,OAAO,EAAE,KAAX;AAAkBI,QAAAA,OAAO,EAAEN,MAAM,CAACG;AAAlC,OAAP;AAAmD;AACrD;;AACA,SAAKP,oBAAL;AAA2B;AACzB,aAAO;AAAEM,QAAAA,OAAO,EAAE,KAAX;AAAkBE,QAAAA,KAAK,EAAEJ,MAAM,CAACG;AAAhC,OAAP;AAAiD;;AACnD;AACE,aAAOL,KAAP;AAVJ;AAYD,CAlBM,C,CAoBP","sourcesContent":["import {\n  PRODUCT_LIST_REQUEST,\n  PRODUCT_LIST_SUCCESS,\n  PRODUCT_LIST_FAIL,\n  PRODUCT_DETAILS_REQUEST,\n  PRODUCT_DETAILS_SUCCESS,\n  PRODUCT_DETAILS_FAIL,\n} from '../constants/productConstants'\n\nexport const productListReducer = (state = { products: [] }, action) => {\n  // this proudcts: [] gonna be shown in the browser\n  //we gonna evaulate the type of action, may contain a payload\n  switch (action.type) {\n    //prod liust req\n    case PRODUCT_LIST_REQUEST:\n      return { loading: true, products: [] } //loading, when req, we want the componenet to know that it is loading\n    case PRODUCT_LIST_SUCCESS:\n      return { loading: false, products: action.payload } // loading is already done since we have the list of products\n    // products are filled with the payload\n    case PRODUCT_LIST_FAIL: //404 or smth like that\n      return { loading: false, error: action.payload } //we send error in the payload\n    default:\n      return state\n  }\n}\n\nexport const productDetailsReducer = (\n  state = { product: { reviews: [] } },\n  action\n) => {\n  // this proudcts: [] gonna be shown in the browser\n  //we gonna evaulate the type of action, may contain a payload\n  switch (action.type) {\n    //prod liust req\n    case PRODUCT_DETAILS_REQUEST:\n      return { loading: true, ...state } //loading, when req, we want the componenet to know that it is loading\n    case PRODUCT_DETAILS_SUCCESS:\n      return { loading: false, product: action.payload } // loading is already done since we have the list of products\n    // products are filled with the payload\n    case PRODUCT_DETAILS_FAIL: //404 or smth like that\n      return { loading: false, error: action.payload } //we send error in the payload\n    default:\n      return state\n  }\n}\n\n//to use th reducer we have to import it to store js\n"]},"metadata":{},"sourceType":"module"}